import { NextResponse } from "next/server"
import twilio from "twilio"
import { cookies } from "next/headers"
import jwt from "jsonwebtoken"

export async function POST(request: Request) {
  // Store token at function scope so it's available in catch block
  let token: string | null = null;
  
  try {
    // Get the token from the Authorization header
    const authHeader = request.headers.get('Authorization')
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.slice(7)
      console.log("Found token in Authorization header");
    }
    
    // Fallback to cookies if no Authorization header
    if (!token) {
      const cookieStore = cookies()
      token = cookieStore.get("milestone-token")?.value || null
      console.log("Using token from cookies:", !!token);
    }

    if (!token) {
      return NextResponse.json({ error: "Unauthorized - No token provided" }, { status: 401 })
    }
    
    // Log token info (but not the full token for security)
    console.log("Token info:", {
      length: token.length,
      firstChars: token.substring(0, 5) + "...",
      lastChars: "..." + token.substring(token.length - 5),
    });

    // Verify the token to get the user ID
    let decoded;
    try {
      decoded = jwt.verify(
        token,
        process.env.JWT_SECRET || "your-secret-key"
      ) as { id: string; email: string }
      
      if (!decoded || !decoded.id) {
        return NextResponse.json({ error: "Invalid token payload - missing id" }, { status: 401 })
      }
    } catch (jwtError) {
      console.error("JWT verification failed:", jwtError)
      return NextResponse.json({ error: "Invalid authentication token" }, { status: 401 })
    }

    // Parse the form data
    const formData = await request.formData()
    const file = formData.get("file") as File
    const conversationSid = formData.get("conversationSid") as string

    if (!file || !conversationSid) {
      return NextResponse.json(
        { error: "Missing file or conversation SID" },
        { status: 400 }
      )
    }

    // Initialize Twilio client
    const client = twilio(
      process.env.TWILIO_ACCOUNT_SID,
      process.env.TWILIO_AUTH_TOKEN
    )

    // Generate a unique media URL - in a production app you'd use a real storage service
    // Here we're creating a dummy URL that the client can reference
    // For proper file storage, use a service like AWS S3, Cloudinary, or Twilio Media API
    
    // First verify that the authenticated user has access to the conversation
    try {
      const conversation = await client.conversations.v1
        .conversations(conversationSid)
        .fetch();
        
      if (!conversation) {
        return NextResponse.json({ 
          error: "Conversation not found" 
        }, { status: 404 });
      }
      
      // Generate a unique filename
      const fileName = encodeURIComponent(file.name)
      const timestamp = Date.now()
      
      // In a real implementation, you would upload the file to a service
      // and get back a real URL. For now, we'll create a mock URL
      const mediaUrl = `https://twilio-media.example.com/${conversationSid}/${timestamp}/${fileName}`

      // Return the media URL - in a real app, this would be a URL to the uploaded file
      return NextResponse.json({
        success: true,
        mediaUrl: mediaUrl,
      })
    } catch (twilioError) {
      console.error("Twilio API error:", twilioError)
      return NextResponse.json(
        { error: "Failed to send message with file" },
        { status: 500 }
      )
    }
  } catch (error) {
    console.error("Error uploading file:", error)
    
    // Log token details for debugging (but don't log the full token)
    if (token !== null) {
      console.log("Token debug info:", {
        length: token.length,
        firstChars: token.substring(0, 10) + "...",
        lastChars: "..." + token.substring(token.length - 10),
      });
    }
    
    // Provide more detailed error messages based on error type
    if (error instanceof jwt.JsonWebTokenError) {
      console.error("JWT Error:", error.message);
      return NextResponse.json(
        { error: "Invalid authentication token: " + error.message },
        { status: 401 }
      )
    } else if (error instanceof jwt.TokenExpiredError) {
      return NextResponse.json(
        { error: "Authentication token expired" },
        { status: 401 }
      )
    } else if (error instanceof Error && error.message.includes('TWILIO')) {
      // Handle Twilio API errors
      return NextResponse.json(
        { error: `Twilio API error: ${error.message}` },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { error: "Failed to upload file: " + (error instanceof Error ? error.message : "Unknown error") },
      { status: 500 }
    )
  }
}
